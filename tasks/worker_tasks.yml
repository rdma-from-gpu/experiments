---

- name: "Collect time"
  set_fact:
    test_dir: "{{ playbook_dir }}/tmp/{{ this_test }}/{{ lookup('pipe','date --iso-8601=seconds') }}"

- name: "Create test folder {{ test_dir }}"
  file:
    path: "{{ test_dir }}"
    state: directory

- name: setup_worker
  delegate_to: worker
  run_once: true
  block:
  - name: Create launch script for worker
    template:
      src: templates/launch_worker.sh.j2
      dest: "{{ test_dir }}/launch_worker.sh"
      mode: 0777
  - name: Create launch script for measure_bw.py
    template:
      src: templates/launch_measure_bw.sh.j2
      dest: "{{ test_dir }}/launch_measure_bw.sh"
      mode: 0777
    run_once: true
  - name: Create launch script for system_load.py
    template:
      src: templates/launch_system_load.sh.j2
      dest: "{{ test_dir }}/launch_system_load.sh"
      mode: 0777
  - name: Create launch script for nvidia_stats.sh
    template:
      src: templates/launch_nvidia_stats.sh.j2
      dest: "{{ test_dir }}/launch_nvidia_stats.sh"
      mode: 0777

- name: setup_worker
  delegate_to: worker
  run_once: true
  block:
  - name: Create launch script for client
    template:
      src: templates/launch_client.sh.j2
      dest: "{{ test_dir }}/launch_client.sh"
      mode: 0777



- name: Run the test
  block:
    - name: Launch measure_bw.sh
      command: "{{ test_dir }}/launch_measure_bw.sh"
      async: 180 # 3 minutes of runtime
      poll: 0
      register: launch_measure_bw
      delegate_to: worker
      run_once: true

    - name: Launch system_load.py
      register: launch_system_load
      command: "{{ test_dir }}/launch_system_load.sh"
      async: 180 # 3 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true

    - name: Launch nvidia_stats.sh
      register: launch_nvidia_stats
      command: "{{ test_dir }}/launch_nvidia_stats.sh"
      async: 180 # 4 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true

    - name: Launch worker
      register: launch_worker
      become: true
      command: "{{ test_dir }}/launch_worker.sh"
      async: 180 # up 3 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true


    - name: Launch client
      register: launch_client
      become: true
      command: "{{ test_dir }}/launch_client.sh"
      async: 180 # up 3 minutes of runtime
      poll: 0
      delegate_to: client
      run_once: true


    - name: Wait for client to finish
      async_status:
        jid: "{{ launch_client.ansible_job_id }}"
      become: true
      register: job_result_client
      until: job_result_client.finished
      retries: 10000
      delay: 5 # check every 5 second
      delegate_to: client
      run_once: true

    - name: Gently kill worker process
      become: true
      shell: |
        python3 {{playbook_dir}}/templates/gently_kill.py --parent $(cat {{test_dir}}/launch_worker.pid)
        # If the above does not work, we kill brutally all "worker" processes. This may not be a safe solution on a shared system!
        killall worker | true

      delegate_to: worker
      run_once: true

    - name: Wait for worker to finish
      async_status:
        jid: "{{ launch_worker.ansible_job_id }}"
      become: true
      register: job_result_worker
      until: job_result_worker.finished
      retries: 10
      delay: 1 # check every 5 second
      delegate_to: worker
      run_once: true


  always:
    - name: Kill background tasks
      become: true
      shell: |
        cat {{ item }} | xargs kill | true
      with_fileglob: "{{ test_dir }}/*.pid"
      delegate_to: worker
      run_once: true

    - name: save logs client
      #delegate_to: client
      run_once: true
      become: no
      delegate_to: localhost
      copy:
        dest: "{{ test_dir }}/launch_client.log"
        content: "==== stdout ====\n{{ job_result_client.stdout }}\n==== stderr ====\n{{ job_result_client.stderr }}\n"
        mode: 0664
    - name: save logs worker
      #delegate_to: worker
      delegate_to: localhost
      run_once: true
      become: no
      copy:
        dest: "{{ test_dir }}/launch_worker.log"
        content: "==== stdout ====\n{{ job_result_worker.stdout }}\n==== stderr ====\n{{ job_result_worker.stderr }}\n"
          #content: "{{job_result_worker}}"
        mode: 0664
    # - name: show stdout
    #   debug:
    #     var: job_result_client.stdout
    # - name: show stderr
    #   debug:
    #     var: job_result_client.stderr
