---

- name: "Collect time"
  set_fact:
    test_dir: "{{ playbook_dir }}/tmp/{{ this_test }}/{{ lookup('pipe','date --iso-8601=seconds') }}"

- name: "Create test folder {{ test_dir }}"
  file:
    path: "{{ test_dir }}"
    state: directory

- name: setup_profiler
  delegate_to: worker
  run_once: true
  block:
  - name: Create launch script for profiler
    template:
      src: templates/launch_profiler.sh.j2
      dest: "{{ test_dir }}/launch_profiler.sh"
      mode: 0777
  - name: Create launch script for measure_bw.py
    template:
      src: templates/launch_measure_bw.sh.j2
      dest: "{{ test_dir }}/launch_measure_bw.sh"
      mode: 0777
    run_once: true
  - name: Create launch script for system_load.py
    template:
      src: templates/launch_system_load.sh.j2
      dest: "{{ test_dir }}/launch_system_load.sh"
      mode: 0777
  - name: Create launch script for nvidia_stats.sh
    template:
      src: templates/launch_nvidia_stats.sh.j2
      dest: "{{ test_dir }}/launch_nvidia_stats.sh"
      mode: 0777

- name: Run the test
  block:
    - name: Launch system_load.py
      register: launch_system_load
      command: "{{ test_dir }}/launch_system_load.sh"
      async: 180 # 3 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true

    - name: Launch nvidia_stats.sh
      register: launch_nvidia_stats
      command: "{{ test_dir }}/launch_nvidia_stats.sh"
      async: 180 # 4 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true

    - name: Launch profiler
      register: launch_profiler
      become: true
      command: "{{ test_dir }}/launch_profiler.sh"
      async: 180 # up 3 minutes of runtime
      poll: 0
      delegate_to: worker
      run_once: true


    - name: Wait for profiler to finish
      async_status:
        jid: "{{ launch_profiler.ansible_job_id }}"
      become: true
      register: job_result_profiler
      until: job_result_profiler.finished
      retries: 10000
      delay: 5 # check every 5 second
      delegate_to: worker
      run_once: true

  always:
    - name: Kill background tasks
      become: true
      shell: |
        cat {{ item }} | xargs kill | true
      with_fileglob: "{{ test_dir }}/*.pid"
      delegate_to: worker
      run_once: true

    - name: save logs profiler
      #delegate_to: worker
      delegate_to: localhost
      run_once: true
      become: no
      copy:
        dest: "{{ test_dir }}/launch_profiler.log"
        content: "==== stdout ====\n{{ job_result_profiler.stdout }}\n==== stderr ====\n{{ job_result_profiler.stderr }}\n"
          #content: "{{job_result_profiler}}"
        mode: 0664
